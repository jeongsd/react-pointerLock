{"name":"React-pointerlock","tagline":"pointLock api for react.js","body":"# reactPointLock\r\n\r\n[![npm download](https://img.shields.io/npm/dt/react-pointerlock.svg)](https://www.npmjs.com/package/react-pointerlock)\r\n[![npm version](https://img.shields.io/npm/v/react-pointerlock.svg)](https://www.npmjs.com/package/react-pointerlock)\r\n[![Build Status](https://img.shields.io/travis/jeongsd/react-pointerlock.svg)](https://travis-ci.org/jeongsd/react-pointerlock)\r\n[![Licenese](https://img.shields.io/npm/l/react-pointerlock.svg)](./LICENSE)\r\n\r\nThe __Pointer Lock API__ (formerly called Mouse Lock API) provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view. It is ideal for first person 3D games, for example.\r\n\r\nexample code using [MDN Pointer Lock API](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API)\r\n\r\n## installation\r\n`npm install reactPointLock`\r\n\r\n\r\n## Component API\r\n__onMouseMove(movement, event)__\r\n- movement.x : movement x point\r\n- movement.y : movement y point\r\n- event : mousemove event\r\n\r\n## Example\r\n```js\r\nimport React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PointerLock from 'react-pointerlock';\r\n\r\nimport './app.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = { x: 50, y: 50 };\r\n\r\n    this.onMouseMove = this.onMouseMove.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvasDraw();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.canvasDraw();\r\n  }\r\n\r\n  onMouseMove(movement) {\r\n    const canvas = ReactDOM.findDOMNode(this.refs.canvas);\r\n    let x = this.state.x + movement.x;\r\n    let y = this.state.y + movement.y;\r\n\r\n    if (x > canvas.clientWidth + 20) {\r\n      x = 0;\r\n    }\r\n\r\n    if (y > canvas.clientHeight + 20) {\r\n      y = 0;\r\n    }\r\n\r\n    if (x < -15) {\r\n      x = canvas.clientWidth;\r\n    }\r\n\r\n    if (y < -15) {\r\n      y = canvas.clientHeight;\r\n    }\r\n\r\n    this.setState({ x: x, y: y });\r\n  }\r\n\r\n  canvasDraw() {\r\n    const canvas = ReactDOM.findDOMNode(this.refs.canvas);\r\n    const context = canvas.getContext('2d');\r\n\r\n    context.fillStyle = 'black';\r\n    context.fillRect(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n\r\n    context.fillStyle = '#F9F903';\r\n    context.beginPath();\r\n    context.arc(this.state.x, this.state.y, 20, 0, Math.PI * 2, true);\r\n    context.fill();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n      <h1>Pointer lock demo</h1>\r\n      <p>This demo demonstrates usage of the pointer lock API. Click on the canvas area and your mouse will directly control the ball inside the canvas, not your mouse pointer. You can press escape to return to the standard expected state.</p>\r\n\r\n      <h2>X Position: { this.state.x }</h2>\r\n      <h2>Y Position: { this.state.y }</h2>\r\n\r\n      <PointerLock\r\n        onMouseMove={ this.onMouseMove } >\r\n        <canvas\r\n          width=\"640px\"\r\n          height=\"369px\"\r\n          ref=\"canvas\"/>\r\n      </PointerLock>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('app')\r\n);\r\n```\r\n\r\n## Contribute\r\n\r\n```bash\r\nnpm install\r\nnpm start\r\n```\r\n\r\n```bash\r\nnpm build\r\n```\r\n\r\n\r\n## TODO\r\n- test\r\n- css build using babel.js\r\n- minifly\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}